
//path to original source folder (e.g.: src/)
path.original.source= <SOURCEDIR>

//path to original bin folder (e.g.: bin/)
path.original.bin= <BINDIR>

//where to save mutants
path.mutants= /home/stein/mutants/

//class to mutate (full qualified name)
mutation.basic.class= <CLASSTOMUTATE>

//methods to mutate (separated by spaces)
mutation.basic.methods= <METHODS>

//operators to use (separated by spaces)
mutation.basic.operators= AODS AODU AOIS AOIU AORB AORS AORU ASRS COD COI COR LOD LOI LOR ROR SOR

//if mutGenLimit annotations will be ignored
mutation.advanced.ignoreMutGenLimit= true

//if field mutations are allowed
mutation.advanced.allowFieldMutations= true

//if class mutations are allowed
mutation.advanced.allowClassMutations= true

//packages that will be marked to reload (separared by spaces, empty if all are allowed)
mutation.advanced.allowedPackagesToReload=

//enable full verbose information
mutation.advanced.fullVerbose= true

//how much generations to generate
mutation.advanced.generations= 1

mutation.advanced.useSimpleClassNames= true

//MUTATION ANALYSIS

mutation.basic.mutationScore= true
path.tests.bin= <TESTSBINDIR>
mutation.basic.tests= <TESTS>
mutation.basic.showSurvivingMutants= false
mutation.advanced.quickDeath= false
mutation.advanced.toughness= true

mutation.advanced.useExternalJUnitRunner= true
mutation.advanced.useParallelJUnitRunner= true
mutation.advanced.parallelJUnitRunnerThreads= 10
